diff -Naur source/arch/x86/entry/syscalls/syscall_64.tbl linux-5.9/arch/x86/entry/syscalls/syscall_64.tbl
--- source/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-12 02:45:50.000000000 +0530
+++ linux-5.9/arch/x86/entry/syscalls/syscall_64.tbl	2020-10-24 19:16:43.614849366 +0530
@@ -361,7 +361,7 @@
 437	common	openat2			sys_openat2
 438	common	pidfd_getfd		sys_pidfd_getfd
 439	common	faccessat2		sys_faccessat2
-
+440     64      hello                   sys_hello
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
 # for native 64-bit operation. The __x32_compat_sys stubs are created
diff -Naur source/hello/hello.c linux-5.9/hello/hello.c
--- source/hello/hello.c	1970-01-01 05:30:00.000000000 +0530
+++ linux-5.9/hello/hello.c	2020-11-10 07:24:14.000000000 +0530
@@ -0,0 +1,58 @@
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/syscalls.h>
+#include <linux/fs.h>      // Needed by filp
+#include <asm/uaccess.h>   // Needed by segment descriptors
+#include<linux/uaccess.h> //headers
+
+//asmlinkage long __x64_sys_hello(long pid)
+SYSCALL_DEFINE4(hello,int,pid,unsigned long,length,char __user *,path,long,rt)
+{
+
+struct task_struct *task;
+struct file *f;
+char buf[500]; char mypath[500];
+int concStr;char * c;int cou=1;
+long long int start=0;int writeK;int copy;
+  buf[0]='\0'; mypath[0]='\0';
+  task = pid_task(find_vpid(pid), PIDTYPE_PID);
+  // If process is not found.
+  if (task == NULL)
+  {
+    
+    printk(KERN_INFO "Cannot find a process with that PID: %d\n", pid);
+    return -22;
+  }
+  else if(rt<1000000000)
+  {
+  printk(KERN_INFO "Invalid real time requirement \n");
+    return -22;
+  }
+  else
+  {
+    
+    copy=copy_from_user(mypath,path,length+1); mypath[length]='\0';
+    if(copy!=0){  printk(KERN_ALERT "copy error!! %s.\n",mypath); return -1;}
+    f = filp_open(mypath, O_CREAT|O_RDWR, 0666);
+    if(f == NULL) {  printk(KERN_ALERT "filp_open error!!.\n"); return -1;}
+    
+    task->se.real_time_requirement=rt;
+   
+    
+    
+    concStr=snprintf(buf,500,"PID: %d ,state: %ld,prio: %d,recent used cpu: %d, flags: %u, real time priority: %u, policy: %u, real time req: %lu",(int)task->pid,(long)task->state,(int)task->prio,(int)task->recent_used_cpu,(unsigned int)task->flags,(unsigned int)task->rt_priority,(unsigned int)task->policy,(unsigned long)task->se.real_time_requirement);
+    if(concStr<=0){  printk(KERN_ALERT "snprintf error!!.\n"); return -1;}
+    c=buf;  while((*c)!='\0') {cou++; c++;}// cou++;
+    
+    writeK=kernel_write(f,buf,cou,&start);
+    if(writeK<=0){  printk(KERN_ALERT "write error!!.\n %d",cou); return -1;}
+   
+ printk(KERN_INFO "PID: %d ,state: %ld,prio: %d,recent used cpu: %d, flags: %u, real time priority: %u, policy: %u",(int)task->pid,(long)task->state,(int)task->prio,(int)task->recent_used_cpu,(unsigned int)task->flags,(unsigned int)task->rt_priority,(unsigned int)task->policy);
+ 
+    filp_close(f,NULL);
+    
+  }
+
+  // If nothing goes wrong, return 0 as successful
+  return 0;
+}
diff -Naur source/hello/Makefile linux-5.9/hello/Makefile
--- source/hello/Makefile	1970-01-01 05:30:00.000000000 +0530
+++ linux-5.9/hello/Makefile	2020-10-25 02:09:09.420359450 +0530
@@ -0,0 +1 @@
+obj-y := hello.o
diff -Naur source/include/linux/sched.h linux-5.9/include/linux/sched.h
--- source/include/linux/sched.h	2020-10-12 02:45:50.000000000 +0530
+++ linux-5.9/include/linux/sched.h	2020-11-08 10:12:44.000000000 +0530
@@ -460,7 +460,7 @@
 	u64				prev_sum_exec_runtime;
 
 	u64				nr_migrations;
-
+        u64                             real_time_requirement;
 	struct sched_statistics		statistics;
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
diff -Naur source/include/linux/syscalls.h linux-5.9/include/linux/syscalls.h
--- source/include/linux/syscalls.h	2020-10-12 02:45:50.000000000 +0530
+++ linux-5.9/include/linux/syscalls.h	2020-11-06 09:51:12.000000000 +0530
@@ -1345,4 +1345,5 @@
 		int __user *optlen);
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
 		int optlen);
+asmlinkage long sys_hello(int pid, unsigned long length,char __user *path,long rt);		
 #endif
diff -Naur source/kernel/sched/core.c linux-5.9/kernel/sched/core.c
--- source/kernel/sched/core.c	2020-10-12 02:45:50.000000000 +0530
+++ linux-5.9/kernel/sched/core.c	2020-11-08 10:14:52.000000000 +0530
@@ -3070,6 +3070,8 @@
 	p->se.prev_sum_exec_runtime	= 0;
 	p->se.nr_migrations		= 0;
 	p->se.vruntime			= 0;
+	
+	p->se.real_time_requirement=0;
 	INIT_LIST_HEAD(&p->se.group_node);
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
diff -Naur source/kernel/sched/fair.c linux-5.9/kernel/sched/fair.c
--- source/kernel/sched/fair.c	2020-10-12 02:45:50.000000000 +0530
+++ linux-5.9/kernel/sched/fair.c	2020-11-10 05:02:08.000000000 +0530
@@ -534,6 +534,11 @@
 static inline int entity_before(struct sched_entity *a,
 				struct sched_entity *b)
 {
+	//return (s64)((b->rt_nice+a->vruntime) - (a->rt_nice+b->vruntime)) < 0;
+	if((a->real_time_requirement>0) && (b->real_time_requirement>0)) return (s64)(a->real_time_requirement - b->real_time_requirement) < 0;
+	if(a->real_time_requirement>0) return 1;
+	else if(b->real_time_requirement>0) return 0;
+	
 	return (s64)(a->vruntime - b->vruntime) < 0;
 }
 
@@ -859,8 +864,20 @@
 
 	curr->sum_exec_runtime += delta_exec;
 	schedstat_add(cfs_rq->exec_clock, delta_exec);
+	//new code
+	if(curr->real_time_requirement>0)
+	{
+	if(curr->real_time_requirement>delta_exec) curr->real_time_requirement-=delta_exec;
+	else curr->real_time_requirement=0;
+	return ;
+	}
+	//new code ends
 
 	curr->vruntime += calc_delta_fair(delta_exec, curr);
+	
+	
+	
+	
 	update_min_vruntime(cfs_rq);
 
 	if (entity_is_task(curr)) {
@@ -4432,6 +4449,7 @@
 {
 	struct sched_entity *left = __pick_first_entity(cfs_rq);
 	struct sched_entity *se;
+	struct task_struct *mytask;
 
 	/*
 	 * If curr is set we have to see if its left of the leftmost entity
@@ -4472,6 +4490,24 @@
 	 */
 	if (cfs_rq->next && wakeup_preempt_entity(cfs_rq->next, left) < 1)
 		se = cfs_rq->next;
+		
+	
+	//new code
+	
+	
+	/*for_each_process(mytask)
+	{
+	if(mytask->se.rt_nice>mytask->se.sum_exec_runtime)
+	{
+	se=&(mytask->se);
+	printk("rejected CFS decision");
+	break;
+	}
+	}	*/
+	//new code ends
+		
+		
+		
 
 	clear_buddies(cfs_rq, se);
 
@@ -6843,7 +6879,14 @@
 wakeup_preempt_entity(struct sched_entity *curr, struct sched_entity *se)
 {
 	s64 gran, vdiff = curr->vruntime - se->vruntime;
-
+//new code
+       if((curr->real_time_requirement>0) ||(se->real_time_requirement>0))
+       {
+       s64 soft_real_diff=curr->real_time_requirement-se->real_time_requirement;
+       if (soft_real_diff>0) return -1;
+       if(soft_real_diff==0) return -1;
+       }
+ //new code end
 	if (vdiff <= 0)
 		return -1;
 
diff -Naur source/Makefile linux-5.9/Makefile
--- source/Makefile	2020-10-12 02:45:50.000000000 +0530
+++ linux-5.9/Makefile	2020-10-26 23:36:19.887174738 +0530
@@ -1094,7 +1094,7 @@
 export MODULES_NSDEPS := $(extmod-prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/ hello/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
